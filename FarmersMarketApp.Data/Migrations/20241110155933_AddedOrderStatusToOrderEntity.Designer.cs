// <auto-generated />
using System;
using FarmersMarketApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmersMarketApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241110155933_AddedOrderStatusToOrderEntity")]
    partial class AddedOrderStatusToOrderEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Physical address of application user.");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of application user.");

                    b.Property<bool>("IsFarmer")
                        .HasColumnType("bit")
                        .HasComment("Flag to show if user is a farmer or not.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of application user.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5510c3c2-99fd-4522-48cd-08dcf84e43e5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01ca4878-6888-43ef-a1d2-cc223228839d",
                            Email = "dwight@office.com",
                            EmailConfirmed = true,
                            FirstName = "Dwight",
                            IsFarmer = true,
                            LastName = "Schrute",
                            LockoutEnabled = false,
                            NormalizedEmail = "DWIGHT@OFFICE.COM",
                            NormalizedUserName = "DWIGHT@OFFICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELPFsuAPVkIpPV/+BcezDIWW/K0tQroHSuJ7pInP3nApMgh3tXF/b4xslPrJBjl5BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "618a1cc6-6284-4702-871c-1e58fe74f3f8",
                            TwoFactorEnabled = false,
                            UserName = "dwight@office.com"
                        },
                        new
                        {
                            Id = new Guid("e2eca858-9a52-4496-c029-08dcf857a1b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "331d378f-05d3-4ec0-b525-4106cdb29d55",
                            Email = "kevin@office.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsFarmer = true,
                            LastName = "Bacon",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVIN@OFFICE.COM",
                            NormalizedUserName = "KEVIN@OFFICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJeIzPk1VymJFdfVfNe03CNUtyYd2BraklVZA6h34spb+R4xSGGyBNADHOx3LqQSsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd625ce4-2475-4d80-a609-df9d3ddf4598",
                            TwoFactorEnabled = false,
                            UserName = "kevin@office.com"
                        },
                        new
                        {
                            Id = new Guid("df1516df-4501-475e-c02a-08dcf857a1b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "815a9fd8-d6c9-4518-b840-025f49df6f82",
                            Email = "michael@office.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            IsFarmer = true,
                            LastName = "Scott",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL@OFFICE.COM",
                            NormalizedUserName = "MICHAEL@OFFICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEiGKdJNZPC1OeQmeOt+MqrlJohyqun5cp28zfBcYaSp7Bl57ZJXzIcUHUjRUyMQQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "288b8da7-b517-4f95-af28-3916b878adc1",
                            TwoFactorEnabled = false,
                            UserName = "michael@office.com"
                        },
                        new
                        {
                            Id = new Guid("1a03a969-75c2-43fe-9cfd-4bf3c7f71ac2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f05178b-8348-428e-a48f-fa4aea90f75e",
                            Email = "jim@office.com",
                            EmailConfirmed = true,
                            FirstName = "Jim",
                            IsFarmer = false,
                            LastName = "Halpert",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIM@OFFICE.COM",
                            NormalizedUserName = "JIM@OFFICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqLVyFFzcAxDPynLPtHtCTJiwiev5KrtQ9/ZSPRRG8f6hhp6Rc6cZDkofSM4+NllQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08f6ec97-4269-466d-b207-47e30c651036",
                            TwoFactorEnabled = false,
                            UserName = "jim@office.com"
                        },
                        new
                        {
                            Id = new Guid("80800dfa-3962-4c0a-b0aa-d46c75ee83f6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "668385dc-f3ac-44a0-ae2f-fe86ea1547ab",
                            Email = "creed@office.com",
                            EmailConfirmed = true,
                            FirstName = "Creed",
                            IsFarmer = false,
                            LastName = "Bratton",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREED@OFFICE.COM",
                            NormalizedUserName = "CREED@OFFICE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFRcdlw9yyqZ4eTf/CF1n6XYQvwnSxcz2QfydaKsB1hXO1Od/Us54/Vhlf2A6vZNLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a361e509-ad28-459e-b4c6-449937b3e998",
                            TwoFactorEnabled = false,
                            UserName = "creed@office.com"
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Category name.");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Meat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Grain"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fats"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Eggs"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.CategoryFarmer", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier.");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Farmer identifier.");

                    b.HasKey("CategoryId", "FarmerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("CategoriesFarmers");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of farm");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Physical address of farm.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("City where farm is located or close to.");

                    b.Property<TimeOnly?>("CloseHours")
                        .HasColumnType("time")
                        .HasComment("Closing hours of farm operations.");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Email address of farm for enquiries.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image url of farm picture.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Boolean flag for farm soft deletion");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit")
                        .HasComment("Flag to check if farm is open for business.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Farm name.");

                    b.Property<TimeOnly?>("OpenHours")
                        .HasColumnType("time")
                        .HasComment("Opening hours of farm operations.");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Phone number of farm visible to general public.");

                    b.HasKey("Id");

                    b.ToTable("Farms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8fd1d22-ad66-4850-8a23-54d33e488964"),
                            Address = "123 Greenway Drive",
                            City = "Riverside",
                            CloseHours = new TimeOnly(18, 0, 0),
                            Email = "contact@sunnyfields.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Sunny Fields",
                            OpenHours = new TimeOnly(8, 0, 0),
                            PhoneNumber = "555-1234"
                        },
                        new
                        {
                            Id = new Guid("581569fd-5062-4435-899b-8bfe31d2f4e8"),
                            Address = "456 Oak Avenue",
                            City = "Hilltop",
                            CloseHours = new TimeOnly(17, 0, 0),
                            Email = "info@mountainviewfarm.com",
                            IsDeleted = false,
                            IsOpen = false,
                            Name = "Mountainview Farm",
                            OpenHours = new TimeOnly(7, 0, 0),
                            PhoneNumber = "555-5678"
                        },
                        new
                        {
                            Id = new Guid("9a020bca-2f9f-4b61-af21-1adae08dd8e9"),
                            Address = "789 Blueberry Lane",
                            City = "Lakewood",
                            CloseHours = new TimeOnly(20, 0, 0),
                            Email = "hello@lakesideorchards.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Lakeside Orchards",
                            OpenHours = new TimeOnly(9, 0, 0),
                            PhoneNumber = "555-8765"
                        },
                        new
                        {
                            Id = new Guid("c437b349-7f30-44de-865a-31f24fc7c584"),
                            Address = "321 Apple Street",
                            City = "Springfield",
                            CloseHours = new TimeOnly(19, 0, 0),
                            Email = "support@greenmeadowfarms.com",
                            IsDeleted = false,
                            IsOpen = false,
                            Name = "Green Meadow Farms",
                            OpenHours = new TimeOnly(6, 0, 0),
                            PhoneNumber = "555-1122"
                        },
                        new
                        {
                            Id = new Guid("dcbae87c-93a9-4699-b3e4-2e10776839dd"),
                            Address = "654 Maple Road",
                            City = "Greenville",
                            CloseHours = new TimeOnly(18, 30, 0),
                            Email = "contact@valleyfarmmarket.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Valley Farm Market",
                            OpenHours = new TimeOnly(8, 30, 0),
                            PhoneNumber = "555-3344"
                        },
                        new
                        {
                            Id = new Guid("7da444a3-fc8c-43e6-a223-378e5a51be4e"),
                            Address = "912 Sunset Blvd",
                            City = "Clearwater",
                            CloseHours = new TimeOnly(16, 30, 0),
                            Email = "info@sunriseranch.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Sunrise Ranch",
                            OpenHours = new TimeOnly(7, 30, 0),
                            PhoneNumber = "555-9912"
                        },
                        new
                        {
                            Id = new Guid("6ee2702d-fab7-42f4-bf10-6becc7b9dbd3"),
                            Address = "200 Harvest Lane",
                            City = "Fairview",
                            CloseHours = new TimeOnly(18, 0, 0),
                            Email = "contact@harvesthill.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Harvest Hill Farm",
                            OpenHours = new TimeOnly(6, 0, 0),
                            PhoneNumber = "555-2211"
                        },
                        new
                        {
                            Id = new Guid("63ad63d2-5884-4c3d-93f1-1aaf75c0a563"),
                            Address = "845 Willow Road",
                            City = "Silverlake",
                            CloseHours = new TimeOnly(17, 0, 0),
                            Email = "hello@willowcreek.com",
                            IsDeleted = false,
                            IsOpen = false,
                            Name = "Willow Creek Farm",
                            OpenHours = new TimeOnly(7, 0, 0),
                            PhoneNumber = "555-4433"
                        },
                        new
                        {
                            Id = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            Address = "77 Orchard Street",
                            City = "Brookside",
                            CloseHours = new TimeOnly(20, 0, 0),
                            Email = "support@meadowbrook.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Meadow Brook Orchards",
                            OpenHours = new TimeOnly(8, 0, 0),
                            PhoneNumber = "555-9988"
                        },
                        new
                        {
                            Id = new Guid("e609dc73-6845-4e72-80a4-1ad215a094d1"),
                            Address = "389 Valley View",
                            City = "Eagle Peak",
                            CloseHours = new TimeOnly(17, 30, 0),
                            Email = "info@blueskyfarms.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Blue Sky Farms",
                            OpenHours = new TimeOnly(5, 30, 0),
                            PhoneNumber = "555-7822"
                        },
                        new
                        {
                            Id = new Guid("77b7f04e-c775-4735-a017-60c7d5b4ede9"),
                            Address = "123 Pinewood Road",
                            City = "Greenwood",
                            CloseHours = new TimeOnly(19, 30, 0),
                            Email = "contact@evergreenacres.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Evergreen Acres",
                            OpenHours = new TimeOnly(6, 30, 0),
                            PhoneNumber = "555-5567"
                        },
                        new
                        {
                            Id = new Guid("272befbb-54fd-41d0-bfca-d72305535321"),
                            Address = "901 River Lane",
                            City = "Watertown",
                            CloseHours = new TimeOnly(18, 0, 0),
                            Email = "info@riverbendfarm.com",
                            IsDeleted = false,
                            IsOpen = false,
                            Name = "Riverbend Farm",
                            OpenHours = new TimeOnly(8, 0, 0),
                            PhoneNumber = "555-3345"
                        },
                        new
                        {
                            Id = new Guid("45c92bba-7ac0-42ae-995e-d6fc10e05067"),
                            Address = "740 Oak Street",
                            City = "Mapleton",
                            CloseHours = new TimeOnly(16, 0, 0),
                            Email = "hello@autumngrove.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Autumn Grove",
                            OpenHours = new TimeOnly(7, 0, 0),
                            PhoneNumber = "555-2344"
                        },
                        new
                        {
                            Id = new Guid("ce2e44ca-d118-4676-9623-624e7f56980e"),
                            Address = "455 Prairie Road",
                            City = "Plainsville",
                            CloseHours = new TimeOnly(18, 0, 0),
                            Email = "contact@prairieview.com",
                            IsDeleted = false,
                            IsOpen = false,
                            Name = "Prairie View Farm",
                            OpenHours = new TimeOnly(6, 0, 0),
                            PhoneNumber = "555-4455"
                        },
                        new
                        {
                            Id = new Guid("012cf2fc-b34e-425f-87a0-cc5989ea5c06"),
                            Address = "112 Orchard Drive",
                            City = "Peach Valley",
                            CloseHours = new TimeOnly(18, 0, 0),
                            Email = "info@orchardhill.com",
                            IsDeleted = false,
                            IsOpen = true,
                            Name = "Orchard Hill",
                            OpenHours = new TimeOnly(8, 0, 0),
                            PhoneNumber = "555-6633"
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Farmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Farmer unique identifier.");

                    b.Property<bool>("AcceptsDeliveries")
                        .HasColumnType("bit")
                        .HasComment("Flag to show if farmer is currently accepting deliveries.");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Company address for billing and shipping purposes.");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Company name of farmer for billing purposes.");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Company registration number for VAT and tax purposes.");

                    b.Property<bool>("HasProducts")
                        .HasColumnType("bit")
                        .HasComment("Flag to show if farmer has any products for sale.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image URL of farmer.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to general application user.");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Farmers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            AcceptsDeliveries = true,
                            CompanyAddress = "321 Privet Drive",
                            CompanyName = "Milky Way",
                            CompanyRegistrationNumber = "315252331",
                            HasProducts = true,
                            UserId = new Guid("5510c3c2-99fd-4522-48cd-08dcf84e43e5")
                        },
                        new
                        {
                            Id = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            AcceptsDeliveries = true,
                            CompanyAddress = "44 Chicken Road",
                            CompanyName = "Los Pollos Hermanos",
                            CompanyRegistrationNumber = "123772341",
                            HasProducts = true,
                            UserId = new Guid("e2eca858-9a52-4496-c029-08dcf857a1b7")
                        },
                        new
                        {
                            Id = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            AcceptsDeliveries = true,
                            CompanyAddress = "1 Ocean Avenue",
                            CompanyName = "FilletOFish",
                            CompanyRegistrationNumber = "335788211",
                            HasProducts = true,
                            UserId = new Guid("df1516df-4501-475e-c02a-08dcf857a1b7")
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.FarmerFarm", b =>
                {
                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique farm identifier.");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique farmer identifier.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("FarmId", "FarmerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("FarmerFarm");

                    b.HasData(
                        new
                        {
                            FarmId = new Guid("012cf2fc-b34e-425f-87a0-cc5989ea5c06"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("ce2e44ca-d118-4676-9623-624e7f56980e"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("45c92bba-7ac0-42ae-995e-d6fc10e05067"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("272befbb-54fd-41d0-bfca-d72305535321"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("77b7f04e-c775-4735-a017-60c7d5b4ede9"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("9a020bca-2f9f-4b61-af21-1adae08dd8e9"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("e609dc73-6845-4e72-80a4-1ad215a094d1"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("63ad63d2-5884-4c3d-93f1-1aaf75c0a563"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("6ee2702d-fab7-42f4-bf10-6becc7b9dbd3"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("7da444a3-fc8c-43e6-a223-378e5a51be4e"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("dcbae87c-93a9-4699-b3e4-2e10776839dd"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("c437b349-7f30-44de-865a-31f24fc7c584"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("581569fd-5062-4435-899b-8bfe31d2f4e8"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            IsDeleted = false
                        },
                        new
                        {
                            FarmId = new Guid("d8fd1d22-ad66-4850-8a23-54d33e488964"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique order identifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time on which order is placed.");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique customer identifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expected date and time on which order is going to be delivered.");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("Status of the current order.");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total discount if applicable.");

                    b.Property<double>("TotalNetWeight")
                        .HasColumnType("float")
                        .HasComment("Total net weight of all items in order.");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of order including discounts.");

                    b.Property<int>("TotalUnitItems")
                        .HasColumnType("int")
                        .HasComment("Total number of units of products contained in order.");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique payment identifier.");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique customer identifier.");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit")
                        .HasComment("Flag is payment is successful.");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique order identifier.");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total payment amount.");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time on which payment is made.");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int")
                        .HasComment("Type of payment method used.");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of each product.");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique barcode of product.");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier of product.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of product in free text format.");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Percentage of discount.");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Expiration date of product.");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of farm where product is made.");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of farmer who produces current product.");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit")
                        .HasComment("Flag if product has active discount.");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image url of product.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Boolean flag for product soft deletion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Product name.");

                    b.Property<double>("NetWeight")
                        .HasColumnType("float")
                        .HasComment("Weight of product in kilograms");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Specific origin of product if applicable");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of product for one unit.");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Production date of product.");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasComment("Amount of products in each unit.");

                    b.Property<int?>("Season")
                        .HasColumnType("int")
                        .HasComment("Specific season for product if applicable");

                    b.Property<double>("ShippingWeight")
                        .HasColumnType("float")
                        .HasComment("Weight of product with container");

                    b.Property<double>("Size")
                        .HasColumnType("float")
                        .HasComment("The size of one individual product in one sold unit.");

                    b.Property<int>("UnitType")
                        .HasColumnType("int")
                        .HasComment("Type of unit which product is distributed in - box, carton, bottle, etc.");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffb5e9d-4c1e-4e0d-8997-1a7e537a5b89"),
                            Barcode = "012345678900",
                            CategoryId = 2,
                            Description = "Fresh organic milk from grass-fed cows.",
                            DiscountPercentage = 10.0m,
                            ExpirationDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("63ad63d2-5884-4c3d-93f1-1aaf75c0a563"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = true,
                            ImageUrl = "/img/milk.jpg",
                            IsDeleted = false,
                            Name = "Organic Milk",
                            NetWeight = 10.0,
                            Origin = "Local",
                            Price = 3.49m,
                            ProductionDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10.0,
                            Season = 1,
                            ShippingWeight = 10.5,
                            Size = 1.0,
                            UnitType = 4
                        },
                        new
                        {
                            Id = new Guid("acdbb2f1-8f25-4b3c-a67a-b4d6e0b0f332"),
                            Barcode = "012345678901",
                            CategoryId = 5,
                            Description = "Freshly picked strawberries, sweet and juicy.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("e609dc73-6845-4e72-80a4-1ad215a094d1"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/strawberries.jpg",
                            IsDeleted = false,
                            Name = "Strawberries",
                            NetWeight = 1.2,
                            Origin = "California",
                            Price = 4.99m,
                            ProductionDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 12.0,
                            Season = 2,
                            ShippingWeight = 1.3,
                            Size = 1.0,
                            UnitType = 5
                        },
                        new
                        {
                            Id = new Guid("b197ed82-64f7-4d5c-b2b4-8cf2b31bfb50"),
                            Barcode = "012345678902",
                            CategoryId = 3,
                            Description = "Premium quality wheat flour for baking.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("9a020bca-2f9f-4b61-af21-1adae08dd8e9"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/wheat_flour.jpg",
                            IsDeleted = false,
                            Name = "Wheat Flour",
                            NetWeight = 10.0,
                            Origin = "USA",
                            Price = 1.99m,
                            ProductionDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 5.0,
                            Season = 3,
                            ShippingWeight = 10.5,
                            Size = 2.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("ad91b21a-547f-4d1b-9e3c-4e0d53f8d347"),
                            Barcode = "012345678903",
                            CategoryId = 7,
                            Description = "Pure honey collected from wildflowers.",
                            DiscountPercentage = 5.0m,
                            ExpirationDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("dcbae87c-93a9-4699-b3e4-2e10776839dd"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = true,
                            ImageUrl = "/img/honey.jpg",
                            IsDeleted = false,
                            Name = "Honey",
                            NetWeight = 12.0,
                            Origin = "Wildflower Fields",
                            Price = 9.99m,
                            ProductionDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 24.0,
                            Season = 3,
                            ShippingWeight = 13.0,
                            Size = 0.5,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("be88d6d4-1ae2-4a5a-9d6c-ef564c6e1c37"),
                            Barcode = "012345678904",
                            CategoryId = 4,
                            Description = "Cold-pressed extra virgin olive oil.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("c437b349-7f30-44de-865a-31f24fc7c584"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/organic_olive_oil.jpg",
                            IsDeleted = false,
                            Name = "Extra Virgin Olive Oil",
                            NetWeight = 15.0,
                            Origin = "Italy",
                            Price = 14.49m,
                            ProductionDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20.0,
                            Season = 3,
                            ShippingWeight = 16.5,
                            Size = 0.75,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("3a679e4b-2c43-4eab-82e5-6c120c9d8e2b"),
                            Barcode = "012345678905",
                            CategoryId = 9,
                            Description = "Organic, free-range chicken eggs.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("7da444a3-fc8c-43e6-a223-378e5a51be4e"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/eggs.png",
                            IsDeleted = false,
                            Name = "Free-range Eggs",
                            NetWeight = 1.8,
                            Origin = "Farm Fresh",
                            Price = 2.99m,
                            ProductionDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 15.0,
                            Season = 3,
                            ShippingWeight = 2.0,
                            Size = 12.0,
                            UnitType = 6
                        },
                        new
                        {
                            Id = new Guid("e2ca22b4-f728-4c4f-888b-17463d93d542"),
                            Barcode = "012345678906",
                            CategoryId = 6,
                            Description = "Fresh, crunchy organic carrots.",
                            DiscountPercentage = 15.0m,
                            ExpirationDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("d8fd1d22-ad66-4850-8a23-54d33e488964"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = true,
                            ImageUrl = "/img/carrots.jpg",
                            IsDeleted = false,
                            Name = "Organic Carrots",
                            NetWeight = 10.0,
                            Origin = "Local",
                            Price = 1.49m,
                            ProductionDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10.0,
                            Season = 4,
                            ShippingWeight = 10.199999999999999,
                            Size = 1.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("b21d8f58-8f67-4cb8-b31f-5ebd2ff1b107"),
                            Barcode = "012345678907",
                            CategoryId = 10,
                            Description = "Freshly squeezed orange juice with no preservatives.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("77b7f04e-c775-4735-a017-60c7d5b4ede9"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/orange_juice.webp",
                            IsDeleted = false,
                            Name = "Orange Juice",
                            NetWeight = 6.0,
                            Origin = "Florida",
                            Price = 3.99m,
                            ProductionDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 6.0,
                            Season = 4,
                            ShippingWeight = 6.2000000000000002,
                            Size = 1.0,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("d1f7e5a6-2a8d-4c5a-80c7-b8c0b58f2d91"),
                            Barcode = "012345678908",
                            CategoryId = 2,
                            Description = "Aged cheddar cheese with a sharp flavor.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("ce2e44ca-d118-4676-9623-624e7f56980e"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/cheddar_cheese.jpg",
                            IsDeleted = false,
                            Name = "Cheddar Cheese",
                            NetWeight = 15.0,
                            Origin = "Wisconsin",
                            Price = 7.99m,
                            ProductionDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 15.0,
                            Season = 4,
                            ShippingWeight = 15.300000000000001,
                            Size = 1.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("b9cdd8a5-3039-4a7f-93a4-9b76c6e5e510"),
                            Barcode = "012345678909",
                            CategoryId = 4,
                            Description = "Smooth almond butter with no added sugar.",
                            DiscountPercentage = 10.0m,
                            ExpirationDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("6ee2702d-fab7-42f4-bf10-6becc7b9dbd3"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = true,
                            ImageUrl = "/img/almond_butter.jpg",
                            IsDeleted = false,
                            Name = "Almond Butter",
                            NetWeight = 10.0,
                            Origin = "California",
                            Price = 12.99m,
                            ProductionDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20.0,
                            Season = 4,
                            ShippingWeight = 10.4,
                            Size = 0.5,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("c62b13b9-6bc2-403f-9e0d-2de6d8f84f88"),
                            Barcode = "012345678910",
                            CategoryId = 5,
                            Description = "Crisp and sweet organic apples.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/apples.jpg",
                            IsDeleted = false,
                            Name = "Organic Apples",
                            NetWeight = 12.0,
                            Origin = "Washington",
                            Price = 2.49m,
                            ProductionDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 12.0,
                            Season = 3,
                            ShippingWeight = 12.4,
                            Size = 1.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("de3442a5-6a4d-4938-babe-2f3a7a5e9b34"),
                            Barcode = "012345678911",
                            CategoryId = 8,
                            Description = "Freshly caught salmon fillet, rich in omega-3.",
                            DiscountPercentage = 5.0m,
                            ExpirationDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("581569fd-5062-4435-899b-8bfe31d2f4e8"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = true,
                            ImageUrl = "/img/salmon.png",
                            IsDeleted = false,
                            Name = "Salmon Fillet",
                            NetWeight = 8.0,
                            Origin = "Alaska",
                            Price = 15.99m,
                            ProductionDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 8.0,
                            Season = 1,
                            ShippingWeight = 8.3000000000000007,
                            Size = 1.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("aa1c9a77-5bf8-4cf8-995f-8f3ebc653c97"),
                            Barcode = "012345678912",
                            CategoryId = 6,
                            Description = "Organic spinach leaves, rich in iron.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("012cf2fc-b34e-425f-87a0-cc5989ea5c06"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/spinach.jpg",
                            IsDeleted = false,
                            Name = "Spinach",
                            NetWeight = 2.0,
                            Origin = "Oregon",
                            Price = 1.99m,
                            ProductionDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20.0,
                            Season = 4,
                            ShippingWeight = 2.2000000000000002,
                            Size = 1.0,
                            UnitType = 5
                        },
                        new
                        {
                            Id = new Guid("ccf1c98e-5cf4-4bfe-82c7-2a1dfb748e12"),
                            Barcode = "012345678913",
                            CategoryId = 2,
                            Description = "Creamy Greek yogurt made from fresh milk.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("45c92bba-7ac0-42ae-995e-d6fc10e05067"),
                            FarmerId = new Guid("cd093e1c-e486-4a7f-b92f-94c22f15f7c1"),
                            HasDiscount = false,
                            ImageUrl = "/img/yogurt.jpg",
                            IsDeleted = false,
                            Name = "Greek Yogurt",
                            NetWeight = 5.0,
                            Origin = "Greece",
                            Price = 4.99m,
                            ProductionDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10.0,
                            Season = 1,
                            ShippingWeight = 5.2000000000000002,
                            Size = 0.5,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("bb0b2f76-f1d8-49a3-ae15-5d2cb36c4899"),
                            Barcode = "012345678914",
                            CategoryId = 10,
                            Description = "Homemade orange marmalade, perfect for breakfast.",
                            DiscountPercentage = 7.5m,
                            ExpirationDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("272befbb-54fd-41d0-bfca-d72305535321"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            HasDiscount = true,
                            ImageUrl = "/img/marmalade.jpg",
                            IsDeleted = false,
                            Name = "Orange Marmalade",
                            NetWeight = 3.75,
                            Origin = "Florida",
                            Price = 5.49m,
                            ProductionDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 15.0,
                            Season = 4,
                            ShippingWeight = 3.7999999999999998,
                            Size = 0.25,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("c6b7e2c2-3f9a-4c27-b6ef-7f70e5bfcf92"),
                            Barcode = "012345678908",
                            CategoryId = 2,
                            Description = "Smooth and creamy almond milk, unsweetened.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("45c92bba-7ac0-42ae-995e-d6fc10e05067"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            HasDiscount = false,
                            ImageUrl = "/img/almond_milk.jpg",
                            IsDeleted = false,
                            Name = "Almond Milk",
                            NetWeight = 10.0,
                            Origin = "California",
                            Price = 4.29m,
                            ProductionDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10.0,
                            Season = 1,
                            ShippingWeight = 10.5,
                            Size = 1.0,
                            UnitType = 4
                        },
                        new
                        {
                            Id = new Guid("d2109b26-f315-48df-baf9-c1c45746e573"),
                            Barcode = "012345678909",
                            CategoryId = 8,
                            Description = "Fresh Atlantic salmon fillet, ready to cook.",
                            DiscountPercentage = 5.0m,
                            ExpirationDate = new DateTime(2023, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("45c92bba-7ac0-42ae-995e-d6fc10e05067"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            HasDiscount = true,
                            ImageUrl = "/img/salmon_fillet.jpg",
                            IsDeleted = false,
                            Name = "Salmon Fillet",
                            NetWeight = 7.5,
                            Origin = "Atlantic Ocean",
                            Price = 12.99m,
                            ProductionDate = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 15.0,
                            Season = 3,
                            ShippingWeight = 7.7999999999999998,
                            Size = 0.5,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("11f7b5fc-f7f1-4782-b90b-b18b5e0fbb47"),
                            Barcode = "012345678910",
                            CategoryId = 5,
                            Description = "Crisp, sweet apples, perfect for snacking.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            HasDiscount = false,
                            ImageUrl = "/img/apples.jpg",
                            IsDeleted = false,
                            Name = "Apples",
                            NetWeight = 8.0,
                            Origin = "Washington",
                            Price = 2.49m,
                            ProductionDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 8.0,
                            Season = 3,
                            ShippingWeight = 8.3000000000000007,
                            Size = 1.0,
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("fa8ec7af-4cf4-4a28-8c37-5f2d3a1ab5e1"),
                            Barcode = "012345678911",
                            CategoryId = 7,
                            Description = "Pure maple syrup, harvested from local maple trees.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            FarmerId = new Guid("1474d237-fe36-4586-ac67-b3ddcf03baac"),
                            HasDiscount = false,
                            ImageUrl = "/img/maple_syrup.jpg",
                            IsDeleted = false,
                            Name = "Maple Syrup",
                            NetWeight = 9.0,
                            Origin = "Vermont",
                            Price = 15.99m,
                            ProductionDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 18.0,
                            Season = 1,
                            ShippingWeight = 9.3000000000000007,
                            Size = 0.5,
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("c89c1d90-a5d7-4416-9403-e5e1e3e0e217"),
                            Barcode = "012345678912",
                            CategoryId = 2,
                            Description = "Thick and creamy Greek yogurt, plain.",
                            DiscountPercentage = 15.0m,
                            ExpirationDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("06a9fdbb-dfd9-47d5-9a4a-7117ed1f2332"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            HasDiscount = true,
                            ImageUrl = "/img/greek_yogurt.png",
                            IsDeleted = false,
                            Name = "Greek Yogurt",
                            NetWeight = 10.0,
                            Origin = "Greece",
                            Price = 5.49m,
                            ProductionDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20.0,
                            Season = 2,
                            ShippingWeight = 10.199999999999999,
                            Size = 500.0,
                            UnitType = 2
                        },
                        new
                        {
                            Id = new Guid("8ab9a582-e0f2-46d1-9e13-8d8b0b2ef731"),
                            Barcode = "012345678913",
                            CategoryId = 2,
                            Description = "Rich and creamy organic butter, perfect for baking.",
                            DiscountPercentage = 0.0m,
                            ExpirationDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("7da444a3-fc8c-43e6-a223-378e5a51be4e"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            HasDiscount = false,
                            ImageUrl = "/img/organic_butter.jpg",
                            IsDeleted = false,
                            Name = "Organic Butter",
                            NetWeight = 2.3999999999999999,
                            Origin = "Local",
                            Price = 3.79m,
                            ProductionDate = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 12.0,
                            Season = 2,
                            ShippingWeight = 2.5,
                            Size = 200.0,
                            UnitType = 2
                        },
                        new
                        {
                            Id = new Guid("0fef93a3-0cd6-4e02-9404-b34d5f0e672a"),
                            Barcode = "012345678914",
                            CategoryId = 3,
                            Description = "Handmade sourdough bread, freshly baked.",
                            DiscountPercentage = 10.0m,
                            ExpirationDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmId = new Guid("7da444a3-fc8c-43e6-a223-378e5a51be4e"),
                            FarmerId = new Guid("65c75a94-f3be-4a7a-913e-d6c868876265"),
                            HasDiscount = true,
                            ImageUrl = "/img/sourdough_bread.jpg",
                            IsDeleted = false,
                            Name = "Sourdough Bread",
                            NetWeight = 7.5,
                            Origin = "Local",
                            Price = 4.99m,
                            ProductionDate = new DateTime(2023, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 15.0,
                            Season = 1,
                            ShippingWeight = 7.5999999999999996,
                            Size = 1.0,
                            UnitType = 1
                        });
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique order identifier.");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique product identifier.");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.CategoryFarmer", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("CategoriesFarmers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Farmer", "Farmer")
                        .WithMany("CategoriesFarmers")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Farmer", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Farmer")
                        .HasForeignKey("FarmersMarketApp.Infrastructure.Data.Models.Farmer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.FarmerFarm", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Farm", "Farm")
                        .WithMany("FarmersFarms")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Farmer", "Farmer")
                        .WithMany("FarmersFarms")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("FarmersMarketApp.Infrastructure.Data.Models.Order", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Farm", "Farm")
                        .WithMany("Products")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Farmer", "Farmer")
                        .WithMany("Products")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Farmer");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("CategoriesFarmers");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Farm", b =>
                {
                    b.Navigation("FarmersFarms");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Farmer", b =>
                {
                    b.Navigation("CategoriesFarmers");

                    b.Navigation("FarmersFarms");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("ProductsOrders");
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("FarmersMarketApp.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("ProductsOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
