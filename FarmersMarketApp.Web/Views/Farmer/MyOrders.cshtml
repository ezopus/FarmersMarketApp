@using FarmersMarketApp.Web.ViewModels.FarmerViewModels
@using System.Globalization
@using FarmersMarketApp.Services.Contracts
@using FarmersMarketApp.Web.Extensions
@model IEnumerable<FarmerProductOrderViewModel>
@inject IFarmerService FarmerService

@{
	var currentFarmerId = await FarmerService.GetFarmerIdByUserIdAsync(User.GetId());
	var toastrMessage = TempData["ToastrMessage"] as string;
	var toastrType = TempData["ToastrType"] as string; // success, error, info, warning
}



<table class="table table-hover align-middle text-center" id="pendingOrdersTable">
	<thead>
	<tr class="table-active">
		<th colspan="2">Order placed</th>
		<th colspan="3">Total items</th>
		<th>Total price</th>
		<th>Customer</th>
		<th>Customer Phone number</th>
		<th>Delivery Address</th>
		<th>Delivery City</th>
		<th colspan="2">Actions</th>
	</tr>
	</thead>
	@if (Model.Any())
	{
		<tbody>
		@foreach (var order in Model.OrderByDescending(o => o.OrderDate))
		{
			<tr class="table-primary" scope="row">
				<td colspan="2">@order.OrderDate</td>
				<td colspan="3">@order.OrderProducts.Sum(p => p.ProductQuantity) items</td>
				<td>@order.OrderProducts.Sum(p => p.ProductPriceAtPurchase * p.ProductQuantity).ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
				<td>@order.DeliveryName</td>
				<td>@order.DeliveryPhoneNumber</td>
				<td>@order.DeliveryAddress</td>
				<td>@order.DeliveryCity</td>
				<td colspan="2">
					<form method="post">
						<button class="btn btn-sm btn-success me-2 orderBtn" asp-action="CompleteOrder" asp-controller="Farmer" asp-route-orderId="@order.OrderId">Complete</button>
						<button class="btn btn-sm btn-danger orderBtn" asp-action="CancelOrder" asp-controller="Farmer" asp-route-orderId="@order.OrderId">Cancel</button>
					</form>
					<form method="get">
						<button class="btn btn-sm btn-success me-2 orderBtn" onclick="completeOrder(@currentFarmerId, @order.OrderId)">Complete api</button>
						<button class="btn btn-sm btn-danger orderBtn" onclick="cancelOrder(@currentFarmerId, @order.OrderId)">Cancel api</button>
					</form>
				</td>
			</tr>
			@foreach (var product in order.OrderProducts)
			{
				<tr class="table-secondary">
					<td colspan="2"></td>
					<td>@product.ProductName</td>
					<td>@product.ProductQuantity</td>
					<td>@product.ProductPriceAtPurchase.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
					<td colspan="1">@((product.ProductPriceAtPurchase * product.ProductQuantity).ToString("C", CultureInfo.CreateSpecificCulture("en-US")))</td>
					<td colspan="7"></td>
				</tr>
			}
		}

		</tbody>
	}
	else
	{
		<tbody>
		<tr class="table-light" scope="row">
			<td colspan="7" class="pt-4 pb-4">
				No pending orders available.
			</td>
		</tr>
		</tbody>
	}
</table>

@if (!string.IsNullOrEmpty(toastrMessage))
{
	<script>toastr['@toastrType']('@toastrMessage');</script>
}

<script src="~/js/orderActions.js" type="module"></script>
@* <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script>
	toastr.options = {
		"closeButton": true,
		"debug": false,
		"newestOnTop": true,
		"progressBar": true,
		"positionClass": "toast-top-right", // e.g., 'toast-bottom-left'
		"preventDuplicates": true,
		"showDuration": "300",
		"hideDuration": "1000",
		"timeOut": "5000",
		"extendedTimeOut": "1000",
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "fadeIn",
		"hideMethod": "fadeOut"
	};
</script> *@