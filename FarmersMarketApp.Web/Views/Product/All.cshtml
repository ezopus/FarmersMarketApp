@using FarmersMarketApp.ViewModels.ProductViewModels
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using FarmersMarketApp.Services.Contracts
@using FarmersMarketApp.Web.Extensions
@using FarmersMarketApp.Common.Enums
@model ProductsQueryModel
@inject IFarmerService FarmerService
@inject IFarmService FarmService

@{
	var categories = Enum.GetValues<ProductType>();
	var farms = await FarmService.GetAllFarmNamesAndIdsAsync();

	string? selectedCategory = Context.Request.Query["categoryId"];
	string? selectedFarm = Context.Request.Query["farmId"];
	string? selectedSorting = Context.Request.Query["filter"];

	var hasFarmerId = !string.IsNullOrEmpty(await FarmerService.GetFarmerIdByUserIdAsync(User.GetId()));
	ViewData["Title"] = "Products";
}

@* Filtering options *@
<div class="d-flex justify-content-end align-items-center mb-2" style="margin-top: 20px;">
	@if (User?.Identity?.IsAuthenticated == true && hasFarmerId)
	{
		<a asp-controller="Product" asp-action="Add" class="btn btn-success"><i class="fa-solid fa-plus"></i> Add Product</a>
	}
</div>
<form method="get">
	<div class="d-flex align-items-center">
		<select id="categoryDropdown" asp-for="@Model.Category" class="nav nav-pills nav-item nav-link bg-dark text-light form-control-sm me-3" aria-required="true" asp-items="@(new SelectList(Model.Categories, "Id", "Name"))">
			<option value="">All categories</option>
		</select>
		<select id="farmDropDown" asp-for="@Model.FarmId" class="nav-link bg-dark text-light form-control-sm me-3" aria-required="true" asp-items="@(new SelectList(Model.Farms, "Id", "Name"))">
			<option value="">All farms</option>
		</select>
		<select id="farmerDropDown" asp-for="@Model.FarmerId" class="nav-link bg-dark text-light form-control-sm me-3" aria-required="true" asp-items="@(new SelectList(Model.Farmers, "Id", "Name"))">
			<option value="">All farmers</option>
		</select>
		<select id="sortingDropdown" asp-for="@Model.Sorting" class="nav-link bg-dark text-light form-control-sm me-3" aria-required="true">
			<option value="@ProductSorting.Newest">Newest</option>
			<option value="@ProductSorting.PriceAscending">Price ascending</option>
			<option value="@ProductSorting.PriceDescending">Price descending</option>
			<option value="@ProductSorting.Oldest">Oldest</option>
		</select>
		<input class="form-control-sm me-3 w-100" asp-for="SearchTerm" type="text" name="SearchTerm" placeholder="Search for product..." />
		<button class="btn btn-info" asp-controller="Product" asp-action="All">Filter</button>
	</div>
</form>
<hr />

@* Visualize product cards *@

<div class="row text-center">
	@foreach (var product in Model.Products)
	{
		<div class="col-md-3 mb-3">
			<div class="card h-100" style="width: 100%;">
				@if (!string.IsNullOrEmpty(product.ImageUrl))
				{
					<img src="@product.ImageUrl" class="card-img-top rounded" style="height:200px; object-fit: cover;" alt="@product.Name">
				}
				else
				{
					<img src="/img/no-image.png" class="card-img-top" style="height: 200px; object-fit: cover;" alt="No Image Available">
				}

				<div class="card-body d-flex flex-column">
					<h5 class="card-title text-light">@product.Name</h5>
					<h6 class="card-title text-light">@product.Farm.Name</h6>
					@if (product.HasDiscount)
					{
						<p class="card-text text-warning">
							@((product.Price - product.DiscountPercentage / 100 * product.Price).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("en-US")))
							(-@product.DiscountPercentage.ToString("f0")%)
						</p>
					}
					else
					{
						<p class="card-text">
							@product.Price.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("en-US"))
						</p>
					}

					@if (!hasFarmerId)
					{

						<form class="d-flex mb-2" asp-controller="Order" asp-action="AddToCart" method="post">
							<input type="hidden" name="productId" value="@product.Id" />
							<input id="productAmount" name="productAmount" type="number" class="form-control w-25 me-2 text-end" style="-webkit-appearance: none; -moz-appearance: textfield;" value="1" />
							<button class="btn btn-success w-75">
								Add to cart <i class="fa-solid fa-cart-plus"></i>
							</button>
						</form>

					}
					<div class="d-flex flex-column">
						<a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-info w-100">Details</a>
					</div>
				</div>
			</div>
		</div>
	}
</div>

<div>
	<p class="text-center">Showing @(Model.TotalProducts > Model.ProductsPerPage ? Model.ProductsPerPage : Model.TotalProducts) of @Model.TotalProducts products</p>
</div>

@* Pagination *@
@{
	var previousPage = Model.CurrentPage - 1;
	if (previousPage < 1)
	{
		previousPage = 1;
	}
	var maxPage = Math.Ceiling((double)Model.TotalProducts / Model.ProductsPerPage);
}

<div class="">
	<ul class="pagination justify-content-center">
		<li class="page-item">
			<a class="page-link @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
			   asp-controller="Product"
			   asp-action="All"
			   asp-route-currentPage="@previousPage"
			   asp-route-searchTerm="@Model.SearchTerm"
			   asp-route-categoryId="@Model.Category"
			   asp-route-farmId="@Model.FarmId"
			   asp-route-farmerId="@Model.FarmerId"
			   asp-route-sorting="@((int)Model.Sorting)">&laquo;</a>
		</li>
		
		<li class="page-item">
			<a class="page-link"
			   asp-controller="Product"
			   asp-action="All"
			   asp-route-searchTerm="@Model.SearchTerm"
			   asp-route-categoryId="@Model.Category"
			   asp-route-farmId="@Model.FarmId"
			   asp-route-farmerId="@Model.FarmerId"
			   asp-route-currentPage="@Model.CurrentPage"
			   asp-route-sorting="@((int)Model.Sorting)">@Model.CurrentPage</a>
		</li>

		<li class="page-item">
			<a class="page-link @(Model.CurrentPage == (int)maxPage ? "disabled" : string.Empty)"
			   asp-controller="Product"
			   asp-action="All"
			   asp-route-searchTerm="@Model.SearchTerm"
			   asp-route-categoryId="@Model.Category"
			   asp-route-farmId="@Model.FarmId"
			   asp-route-farmerId="@Model.FarmerId"
			   asp-route-currentPage="@(Model.CurrentPage + 1)"
			   asp-route-sorting="@((int)Model.Sorting)">&raquo;</a>
		</li>
	</ul>
</div>
